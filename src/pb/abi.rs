// This file is @generated by prost-build.
/// 短链接数据结构
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShortUrl {
    #[prost(int64, tag = "1")]
    pub id: i64,
    #[prost(string, tag = "2")]
    pub long_url: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub short_code: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "5")]
    pub expires_at: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "6")]
    pub user_id: ::prost::alloc::string::String,
}
/// 创建短链接请求
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateShortUrlRequest {
    #[prost(string, tag = "1")]
    pub long_url: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub custom_code: ::core::option::Option<::prost::alloc::string::String>,
    /// 超时时间（秒）
    #[prost(int64, optional, tag = "3")]
    pub timeout: ::core::option::Option<i64>,
    #[prost(string, tag = "4")]
    pub user_id: ::prost::alloc::string::String,
}
/// 短链接响应
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShortUrlResponse {
    #[prost(int64, tag = "1")]
    pub id: i64,
    #[prost(string, tag = "2")]
    pub long_url: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub short_code: ::prost::alloc::string::String,
    /// 完整的短链接 URL
    #[prost(string, tag = "4")]
    pub short_url: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "6")]
    pub expires_at: ::core::option::Option<::prost::alloc::string::String>,
}
/// 获取用户链接响应
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUserUrlsResponse {
    #[prost(message, repeated, tag = "1")]
    pub urls: ::prost::alloc::vec::Vec<ShortUrl>,
}
/// 删除链接请求
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteShortUrlRequest {
    #[prost(int64, tag = "1")]
    pub id: i64,
    #[prost(string, tag = "2")]
    pub user_id: ::prost::alloc::string::String,
}
/// 通用响应
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(oneof = "api_response::Data", tags = "3, 4")]
    pub data: ::core::option::Option<api_response::Data>,
}
/// Nested message and enum types in `ApiResponse`.
pub mod api_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Data {
        #[prost(message, tag = "3")]
        ShortUrl(super::ShortUrlResponse),
        #[prost(message, tag = "4")]
        UserUrls(super::GetUserUrlsResponse),
    }
}
/// 错误响应
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ErrorResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub error_code: ::prost::alloc::string::String,
}
